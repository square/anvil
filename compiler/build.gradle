import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
  id 'com.squareup.anvil.library'
  alias libs.plugins.kotlin.kapt
  alias libs.plugins.buildconfig
  id 'com.squareup.anvil.publish'
}

buildConfig {
  className('BuildProperties')
  packageName('com.squareup.anvil.compiler')
  useKotlinOutput { topLevelConstants = true }

  buildConfigField('boolean', 'WARNINGS_AS_ERRORS',"${rootProject.ext.warningsAsErrors}")
  buildConfigField('boolean', 'FULL_TEST_RUN', "${libs.versions.config.fullTestRun.get()}")
  buildConfigField('boolean', 'INCLUDE_KSP_TESTS', "${libs.versions.config.includeKspTests.get()}")
}

publish {
  configurePom(
      artifactId: 'compiler',
      pomName: 'Anvil Compiler',
      pomDescription: 'The core implementation module for Anvil, responsible for hooking into ' +
          'the Kotlin compiler and orchestrating code generation'
  )
}

dependencies {
  implementation project(':annotations')
  implementation project(':compiler-api')
  implementation project(':compiler-utils')
  implementation libs.dagger2
  implementation libs.jsr250
  implementation libs.kotlinpoet
  implementation libs.kotlinpoet.ksp

  compileOnly libs.auto.service.annotations
  compileOnly libs.kotlin.compiler
  compileOnly libs.ksp.api

  kapt libs.auto.service.processor

  testImplementation testFixtures(project(":compiler-utils"))
  testImplementation libs.dagger2.compiler
  testImplementation libs.kotlin.annotationProcessingEmbeddable
  testImplementation libs.kotlin.compileTesting
  testImplementation libs.kotlin.compileTesting.ksp
  testImplementation libs.ksp.compilerPlugin
  testImplementation libs.kotlin.compiler
  testImplementation libs.kotlin.test
  testImplementation libs.truth
}

// Fixes:
// Reason: Task ':compiler:dokkaHtml' uses this output of task ':compiler:kaptKotlin'
// without declaring an explicit or implicit dependency.
tasks.named("dokkaHtml") { mustRunAfter("kaptKotlin") }

tasks.withType(KotlinCompile).configureEach {
  compilerOptions {
    // The flag is needed because we extend an interface that uses @JvmDefault and the Kotlin
    // compiler requires this flag when doing so.
    freeCompilerArgs.add("-Xjvm-default=all")
    freeCompilerArgs.add("-opt-in=org.jetbrains.kotlin.compiler.plugin.ExperimentalCompilerApi")
  }
}

if (!rootProject.ext.ci) {
  tasks.withType(Test).configureEach {
    maxParallelForks = Runtime.runtime.availableProcessors()
  }
}
