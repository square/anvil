apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'org.jetbrains.kotlin.kapt'
apply plugin: 'com.vanniktech.maven.publish'

apply from: project.file('generate_build_properties.gradle')

tasks.withType(Test.class).configureEach { Test testTask ->
  testTask.jvmArgs(
    "--add-opens=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED",
    "--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED",
    "--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED",
    "--add-opens=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED",
    "--add-opens=jdk.compiler/com.sun.tools.javac.jvm=ALL-UNNAMED",
    "--add-opens=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED",
    "--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED",
    "--add-opens=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED",
    "--add-opens=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
    "--add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED"
  )
}

dependencies {
  implementation project(':annotations')
  implementation project(':compiler-api')
  implementation project(':compiler-utils')
  implementation deps.dagger2.dagger
  implementation deps.jsr250
  implementation deps.kotlinpoet

  compileOnly deps.auto.service.annotations
  compileOnly deps.kotlin.compiler

  kapt deps.auto.service.processor

  testImplementation testFixtures(project(":compiler-utils"))
  testImplementation deps.dagger2.compiler
  testImplementation deps.kotlin.annotation_processing_embeddable
  testImplementation deps.kotlin.compile_testing
  testImplementation deps.kotlin.compiler
  testImplementation deps.truth
}

//noinspection UnnecessaryQualifiedReference
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
  kotlinOptions {
    // The flag is needed because we extend an interface that uses @JvmDefault and the Kotlin
    // compiler requires this flag when doing so.
    freeCompilerArgs += "-Xjvm-default=all"
  }
}
