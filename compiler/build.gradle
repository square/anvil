apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'org.jetbrains.kotlin.kapt'
apply from: rootProject.file('publishing.gradle')

apply from: project.file('generate_build_properties.gradle')

dependencies {
  implementation project(':annotations')
  implementation project(':compiler-api')
  implementation project(':compiler-utils')
  implementation deps.dagger2.dagger
  implementation deps.jsr250
  implementation deps.kotlinpoet

  compileOnly deps.auto.service.annotations
  compileOnly deps.kotlin.compiler

  kapt deps.auto.service.processor

  testImplementation testFixtures(project(":compiler-utils"))
  testImplementation deps.dagger2.compiler
  testImplementation deps.kotlin.annotation_processing_embeddable
  testImplementation deps.kotlin.compile_testing
  testImplementation deps.kotlin.compiler
  testImplementation deps.kotlin.test
  testImplementation deps.truth
}

//noinspection UnnecessaryQualifiedReference
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
  compilerOptions {
    // The flag is needed because we extend an interface that uses @JvmDefault and the Kotlin
    // compiler requires this flag when doing so.
    freeCompilerArgs.add("-Xjvm-default=all")
    freeCompilerArgs.add("-opt-in=org.jetbrains.kotlin.compiler.plugin.ExperimentalCompilerApi")
  }
}

if (!rootProject.ext.ci) {
  tasks.withType(Test).configureEach {
    maxParallelForks = Runtime.runtime.availableProcessors()
  }
}
