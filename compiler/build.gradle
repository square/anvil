import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
  alias(libs.plugins.kotlin.jvm)
  alias(libs.plugins.kotlin.kapt)
}
apply from: rootProject.file('publishing.gradle')

apply from: project.file('generate_build_properties.gradle')

dependencies {
  implementation project(':annotations')
  implementation project(':compiler-api')
  implementation project(':compiler-utils')
  implementation libs.dagger2
  implementation libs.jsr250
  implementation libs.kotlinpoet
  implementation libs.kotlinpoet.ksp

  compileOnly libs.auto.service.annotations
  compileOnly libs.kotlin.compiler
  compileOnly libs.ksp.api

  kapt libs.auto.service.processor

  testImplementation testFixtures(project(":compiler-utils"))
  testImplementation libs.dagger2.compiler
  testImplementation libs.kotlin.annotationProcessingEmbeddable
  testImplementation libs.kotlin.compileTesting
  testImplementation libs.kotlin.compileTesting.ksp
  testImplementation libs.ksp.compilerPlugin
  testImplementation libs.kotlin.compiler
  testImplementation libs.kotlin.test
  testImplementation libs.truth
}

tasks.withType(KotlinCompile).configureEach {
  compilerOptions {
    // The flag is needed because we extend an interface that uses @JvmDefault and the Kotlin
    // compiler requires this flag when doing so.
    freeCompilerArgs.add("-Xjvm-default=all")
    freeCompilerArgs.add("-opt-in=org.jetbrains.kotlin.compiler.plugin.ExperimentalCompilerApi")
  }
}

if (!rootProject.ext.ci) {
  tasks.withType(Test).configureEach {
    maxParallelForks = Runtime.runtime.availableProcessors()
  }
}
