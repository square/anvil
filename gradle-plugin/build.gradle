buildscript {
  repositories {
    google()
    gradlePluginPortal()
    mavenCentral()
  }

  dependencies {
    classpath libs.kotlin.dokka
    classpath libs.kotlin.gradlePlugin
    classpath libs.mavenPublishRaw
    classpath libs.gradlePublishRaw
    classpath libs.ktlintRaw
  }
}

apply from: rootProject.file('copy_properties.gradle')

apply plugin: 'java-gradle-plugin'
apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'com.gradle.plugin-publish'
apply plugin: 'org.jlleitschuh.gradle.ktlint'

apply from: rootProject.file('generate_build_properties.gradle')
apply from: rootProject.file('../publishing.gradle')

// Pull from the GROUP property and assign to the project
group = GROUP

gradlePlugin {
  plugins {
    anvilPlugin {
      id = "com.squareup.anvil"
      displayName = project.findProperty('POM_NAME')
      implementationClass = "com.squareup.anvil.plugin.AnvilPlugin"
      description = project.findProperty('POM_DESCRIPTION')
    }
  }
}

pluginBundle {
  website = project.findProperty('POM_URL')
  vcsUrl = project.findProperty('POM_SCM_URL')
  tags = ['dagger2', 'dagger2-android', 'kotlin', 'kotlin-compiler-plugin']
}

// Use JDK 11 but target Java 8 for maximum compatibility.
java {
  toolchain {
    languageVersion.set(JavaLanguageVersion.of(11))
  }
}

tasks.withType(JavaCompile).configureEach {
  options.release.set(8)
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
  compilerOptions {
    jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_1_8)

    // Because Gradle hardcodes Kotlin versions we have warnings during compilation.
    allWarningsAsErrors = false
  }
}

kotlin {
  explicitApi()
}

ktlint {
  version = libs.versions.ktlint.get()
}

dependencies {
  // Necessary to bump a transitive dependency.
  compileOnly libs.kotlin.reflect

  // Compile only so we don't pre-empty what the consuming project actually uses
  compileOnly libs.kotlin.gradlePlugin
  compileOnly libs.kotlin.gradlePluginApi
  compileOnly libs.agp
}
