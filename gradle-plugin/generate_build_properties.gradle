// The Kotlin subplugin wants to know the version and group of the Kotlin compiler plugin artifact
// before it gives us a Project to retrieve the value from Gradle properties. This workaround
// generates a Kotlin file that becomes part of the source set and contains necessary values.

def generatedDirPath = 'generated/sources/build-properties/kotlin/main'

sourceSets {
  main.java.srcDirs += "$buildDir/$generatedDirPath"
}

def generateBuildProperties = project.tasks.register('generateBuildProperties') {
  def version = getProperty('VERSION_NAME').toString()
  def group = getProperty('GROUP').toString()

  File buildPropertiesFile = layout.buildDirectory.file(generatedDirPath + '/BuildProperties.kt')
      .get().asFile

  inputs.property 'version', version
  inputs.property 'group', group

  outputs.file buildPropertiesFile

  doLast {
    buildPropertiesFile.parentFile.mkdirs()
    buildPropertiesFile.write """\
      package com.squareup.anvil.plugin
      
      internal const val VERSION = "$version"
      internal const val GROUP = "$group"
    """.stripIndent()
  }
}

compileKotlin {
  dependsOn generateBuildProperties
}

// Add the task dependencies to enforce correct ordering when depending out outputs. Requires to be
// lazy, because *SourcesJar seems to be registered in a later lifecycle.
def taskNames = [
    'dokkaHtml',
    'publishPluginJar',
    'runKtlintCheckOverMainSourceSet',
    'javaSourcesJar',
    'kotlinSourcesJar',
]

afterEvaluate {
  taskNames.each { taskName ->
    try {
      tasks.named(taskName).configure {
        it.dependsOn(generateBuildProperties)
      }
    } catch (UnknownTaskException ignored) {
    }
  }

  // javaSourcesJar is registered even later. Gradle is love.
  tasks.whenTaskAdded { Task task ->
    if (taskNames.contains(task.name)) {
      task.dependsOn(generateBuildProperties)
    }
  }
}
