buildscript {
  apply from: rootProject.file('dependencies.gradle')

  repositories {
    google()
    gradlePluginPortal()
    mavenCentral()
  }

  dependencies {
    classpath deps.android_gradle_plugin
    classpath deps.kotlin.dokka
    classpath deps.kotlin.gradle_plugin
    classpath deps.ktlint_plugin
    classpath deps.anvil_plugin
    classpath deps.maven_publishing_plugin
  }
}

println "Versions: " + [
    "Kotlin": ext.kotlinVersion,
    "Gradle": gradle.gradleVersion,
    "Kotlin use IR": ext.kotlinUseIR
]

allprojects {
  repositories {
    google()
    mavenCentral()
  }
}

boolean configureOnDemandEnabled = getProperty("org.gradle.configureondemand", "false").toBoolean()

subprojects {
  if (buildFile.exists()) {
    apply plugin: 'org.jlleitschuh.gradle.ktlint'

    ktlint {
      version = rootProject.ext.ktlintVersion
      verbose = true
    }
  }

  tasks.withType(Test).configureEach {
    testLogging {
      events 'passed', 'failed', 'skipped', 'standardOut', 'standardError'
      exceptionFormat 'FULL'
      showCauses true
      showExceptions true
      showStackTraces true
      showStandardStreams true
    }
  }

  pluginManager.withPlugin("java") {
    // Use JDK 11 but target Java 8 for maximum compatibility
    java {
      toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
      }
    }

    tasks.withType(JavaCompile).configureEach {
      options.release.set(8)
    }
  }

  //noinspection UnnecessaryQualifiedReference
  tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
      jvmTarget = JavaVersion.VERSION_1_8
      useIR = rootProject.ext.kotlinUseIR
      allWarningsAsErrors = rootProject.ext.makeWarningsErrors
      freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]

      boolean optInExperimental = project.name != "annotations"
          && project.name != "scopes"
          && project.name != "dagger-factories-only"
      if (optInExperimental) {
        freeCompilerArgs += "-Xopt-in=com.squareup.anvil.annotations.ExperimentalAnvilApi"
      }
    }
  }

  configurations.all {
    resolutionStrategy.dependencySubstitution {
      substitute module("com.squareup.anvil:annotations") with project(':annotations')
      substitute module("com.squareup.anvil:compiler") with project(':compiler')
      substitute module("com.squareup.anvil:compiler-api") with project(':compiler-api')
      substitute module("com.squareup.anvil:compiler-utils") with project(':compiler-utils')
    }

    // TODO: check if this is needed with newer Kotlin versions.
    if (rootProject.ext.kotlinVersion.startsWith("1.6")) {
      resolutionStrategy {
        // Needed for Kotlin 1.6.
        force deps.kotlin.metadata
      }
    }
  }

  // We disable configure on demand in the local gradle.properties, but you can override this flag
  // either in the CLI command or in ~/.gradle/gradle.properties. We really need to disable
  // configure on demand in order to support the dependency substitution feature above. As a
  // workaround force the evaluation of subprojects.
  //
  // The other option would be to stop the build if we detect configure on the demand, but some
  // folks (including myself ðŸ™ƒ) set the flag globally in the Gradle home dir. The workaround
  // is good enough for now.
  if (configureOnDemandEnabled) {
    //noinspection UnnecessaryQualifiedReference
    (it as org.gradle.api.internal.project.DefaultProject).evaluate()
  }
}

task clean(type: Delete) {
  delete rootProject.buildDir
}

def getProperty(String name, String defaultValue) {
  return project.hasProperty(name) ? project.getProperty(name) : defaultValue
}
